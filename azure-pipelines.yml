# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- main

variables:

  # Azure Resource Manager connection.
  azure_subscription: 'azure_service_conn_factorial_calc'

  # Name of the CI server.
  web_app_name_ci: 'factorial-calculator-ci'

  # Name of the production server.
  web_app_name_prod: 'factorial-calculator'

  # Agent VM image name
  vm_image_name: 'ubuntu-latest'

  # Environment name
  environment_name: 'factorial-calculator'

  # Root folder under which your composer.json file is available.
  root_folder: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  variables:
    phpVersion: '7.3'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vm_image_name)

    steps:

    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        php -version
      workingDirectory: $(root_folder)
      displayName: 'Use PHP Version $(phpVersion)'

    - task: ArchiveFiles@2
      displayName: 'Archive Files'
      inputs:
        rootFolderOrFile: '$(root_folder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true
    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload Package'
      artifact: drop

- stage: DeployToCI
  displayName: 'Deploy Program to CI Server'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vm_image_name)
    environment: $(environment_name)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Program to CI Server (factorial-calculator-ci)'
            inputs:
              azureSubscription: $(azure_subscription)
              appName: $(web_app_name_ci)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip

# Run tests on the web app that was just deployed to the CI server.
# https://stackoverflow.com/questions/69075735/running-python-script-containing-selenium-from-azure-pipelines-not-able-to-loca
# https://www.codewrecks.com/post/old/2018/11/run-python-test-with-azure-devops-pipeline/
# https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/python?view=azure-devops
- stage: Test
  displayName: 'Test Web App'

  # Testing can only occur if the web app was succeessfully deployed to CI server.
  dependsOn: DeployToCI
  condition: succeeded()

  jobs:

  - job: TestJob

    pool:
      vmImage: $(vm_image_name)

    steps:

    # Specify the Python version to use.
    - task: UsePythonVersion@0
      displayName: 'Use Python 3.x'

    # Check google chrome version.
    - script: |
        google-chrome --version
      displayName: 'Check Google Chrome Version'

    # Download Chrome Driver (necessary for Selenium).
    - script: |
        pwd
        wget https://chromedriver.storage.googleapis.com/106.0.5249.61/chromedriver_linux64.zip
        unzip chromedriver_linux64.zip
        ls
        sudo mv chromedriver /bin/chromedriver
        ls
      displayName: 'Download Chrome Driver'

    # Install Python packages.
    - script: |
        python -m pip install --upgrade pip 
        pip install pytest
        pip install pytest-cov
        pip install pytest-xdist
        pip install pytest-bdd
        pip install selenium
      displayName: 'Install Necessary Python Packages'

    # Run testing script.
    - script: |
        pytest $(root_folder)/test/test_script.py --junitxml=$(root_folder)/test/test_results.xml
      displayName: 'Run testing Script'

    # Publish Results (not sure what exactly this does. see https://learn.microsoft.com/en-us/azure/devops/pipelines/ecosystems/python?view=azure-devops).
    # There should be away to make the stage fail if the test results contain at least one failed test. Maybe it does this.
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(root_folder)/test/test_results.xml'
        testRunTitle: 'Publish Test Results'

# Deploy the web app to prod server (hasn't been made yet).
- stage: DeployToProd
  displayName: 'Deploy Program to Prod Server'
  dependsOn: Test
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vm_image_name)
    environment: $(environment_name)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Program to Production Server (factorial-calculator)'
            inputs:
              azureSubscription: $(azure_subscription)
              appName: $(web_app_name_prod)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip